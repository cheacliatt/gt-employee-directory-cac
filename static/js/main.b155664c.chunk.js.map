{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/UserRow/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","UserRow","alt","name","src","style","margin","firstName","lastName","email","age","phone","id","axios","get","App","state","users","generateRandomUsers","API","then","res","setState","data","results","catch","err","console","log","this","map","user","first","last","dob","value","picture","large","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+VAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,aAAaD,EAAME,W,MCG5BC,MAJf,SAAeH,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,MC6BvBE,MA9Bf,SAAiBJ,GACf,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,YACb,yBACEI,IAAKL,EAAMM,KACXL,UAAU,YACVM,IAAKP,EAAMO,IACXC,MAAO,CAAEC,OAAQ,aAGrB,yBAAKR,UAAU,YACnB,oCAAUD,EAAMU,UAAhB,IAA4BV,EAAMW,WAE9B,yBAAKV,UAAU,YACb,qCAAWD,EAAMY,QAEnB,yBAAKX,UAAU,YACb,mCAASD,EAAMa,MAEjB,yBAAKZ,UAAU,YACb,qCAAWD,EAAMc,QAEnB,yBAAKb,UAAU,YACb,kCAAQD,EAAMe,O,iBCxBP,EACG,WACd,OAAOC,IAAMC,IAAI,0CCoCNC,E,4MAlCbC,MAAQ,CACNC,MAAO,I,EAOTC,oBAAsB,WACpBC,IACGC,MAAK,SAACC,GAAD,OAAS,EAAKC,SAAS,CAAEL,MAAOI,EAAIE,KAAKC,aAC9CC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,kEAN9BG,KAAKX,wB,+BAUL,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,yBACCW,KAAKb,MAAMC,MAAMa,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACExB,UAAWwB,EAAK5B,KAAK6B,MACrBxB,SAAUuB,EAAK5B,KAAK8B,KACpBxB,MAAOsB,EAAKtB,MACZC,IAAKqB,EAAKG,IAAIxB,IACdC,MAAOoB,EAAKpB,MACZC,GAAImB,EAAKnB,GAAGuB,MACZ/B,IAAK2B,EAAKK,QAAQC,gB,GA3BZC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.b155664c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction UserRow(props) {\r\n  return (\r\n    <div className=\"row d-flex p-2\">\r\n      <div className=\"col-sm-2\">\r\n        <img\r\n          alt={props.name}\r\n          className=\"img-fluid\"\r\n          src={props.src}\r\n          style={{ margin: \"0 auto\" }}\r\n        />\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n  <p>Name: {props.firstName} {props.lastName}</p>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>Email: {props.email}</p>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>Age: {props.age}</p>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>Phone: {props.phone}</p>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>ID: {props.id}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserRow;\r\n","import axios from \"axios\";\n\n\nexport default {\n  getRandomUsers: () => {\n    return axios.get(\"https://randomuser.me/api/?results=30\");\n  }\n};\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport UserRow from \"./components/UserRow\";\nimport API from \"./utils/API\";\n\nclass App extends Component {\n  state = {\n    users: [],\n  };\n\n  componentDidMount() {\n    this.generateRandomUsers();\n  }\n\n  generateRandomUsers = () => {\n    API.getRandomUsers()\n      .then((res) => this.setState({ users: res.data.results }))\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Hope this works.</Title>\n        {this.state.users.map((user) => (\n          <UserRow\n            firstName={user.name.first}\n            lastName={user.name.last}\n            email={user.email}\n            age={user.dob.age}\n            phone={user.phone}\n            id={user.id.value}\n            src={user.picture.large}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}