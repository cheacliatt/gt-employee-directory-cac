{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/UserRow/index.js","components/Filter/index.js","components/UserHead/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","UserRow","alt","name","src","style","margin","firstName","lastName","email","age","phone","Filter","onChange","inputChanged","type","id","placeholder","UserHead","onClick","sortByName","axios","get","App","generateRandomUsers","API","then","res","setState","users","data","results","searchUsers","catch","err","console","log","handleInputChange","e","employeeName","target","value","state","search","filter","employees","first","last","toLowerCase","includes","trim","handleSortByName","bind","sorted","this","sortEl","sort","a","b","map","user","dob","picture","large","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5b5bc5d2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <div className=\"header\">\n    <h1 className=\"title\">{props.children}</h1>\n  </div>\n}\n\nexport default Title;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// This sets up the attributes that we place the API data into, then we map it out based on however many results we receive.\r\nfunction UserRow(props) {\r\n  return (\r\n    <div className=\"row d-flex p-2 bd-highlight\">\r\n      <div className=\"col-sm-2\">\r\n        <img\r\n          alt={props.name}\r\n          className=\"img-fluid\"\r\n          src={props.src}\r\n          style={{ margin: \"0 auto\" }}\r\n        />\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>\r\n          {props.firstName} {props.lastName}\r\n        </p>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>{props.email}</p>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>Age: {props.age}</p>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <p>{props.phone}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserRow;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Filter(props) {\r\n  return (\r\n    <div className=\"filter\" onChange={props.inputChanged}>\r\n      <div className=\"form-group form-inline\">\r\n        <input\r\n          type=\"search\"\r\n          className=\"form-control\"\r\n          id=\"searchForm\"\r\n          placeholder=\"Search Users\"\r\n        ></input>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction UserHead(props) {\r\n  return (\r\n    <div className=\"row d-flex p-2 bd-highlight\">\r\n      <div className=\"col-sm-2\">\r\n        <h4>PROFILE PIC</h4>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <h4 onClick={props.sortByName}>\r\n           NAME\r\n           <br></br>\r\n           (click to sort)\r\n        </h4>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <h4>EMAIL</h4>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <h4>AGE</h4>\r\n      </div>\r\n      <div className=\"col-sm-2\">\r\n        <h4>PHONE</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserHead;\r\n","import axios from \"axios\";\n\n// Our API for Random Users, which is exported to the App.js\nexport default {\n  getRandomUsers: () => {\n    return axios.get(\"https://randomuser.me/api/?results=30\");\n  }\n};\n","// Importing all of our components and API for random users\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport UserRow from \"./components/UserRow\";\nimport Filter from \"./components/Filter\";\nimport UserHead from \"./components/UserHead\";\nimport API from \"./utils/API\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    // In order for \"this\" to be recoginized within my handles, I had to bind it. This was a trick I learned during a session with a TA.\n    this.handleSortByName = this.handleSortByName.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    // The current state of things, ha-ha. These are the states the code will be influencing in order to get things to do stuff on the page. Pretty neat!\n    // users and searchUsers are the mapped API data we generate. search is what is put into the input field. sorted is like a boolean for determining if the names will be sorted ascending or descending order.\n    this.state = {\n      users: [],\n      searchUsers: [],\n      search: \"\",\n      sorted: \"ascending\",\n    };\n  }\n  // Standing mounting at the start of the server.\n  componentDidMount() {\n    this.generateRandomUsers();\n  }\n  // This is function that pulls data from our API call we made within the utils folder. This is imported at the top. It fills the empty arrays within our state with data.\n  generateRandomUsers = () => {\n    API.getRandomUsers()\n      .then((res) =>\n        this.setState({\n          users: res.data.results,\n          searchUsers: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  };\n  // This is the input change that allows us to filter the employees names generated\n  handleInputChange = (e) => {\n    const employeeName = e.target.value;\n\n    if(this.state.search === \"\"){\n      this.setState({\n        users: this.state.users,\n      })\n    }\n\n    const searchUsers = this.state.users.filter((employees) => {\n      const { first: firstName, last: lastName } = employees.name;\n      // Deconstructing the filter to match the characters the user puts into the input field.\n      const searchedEmployeesName = `${firstName} ${lastName}`;\n      return searchedEmployeesName\n        .toLowerCase()\n        .includes(employeeName.toLowerCase().trim());\n        // Trim and lowercase so it matches any input.\n    });\n    // Updates the state to match what is entered into the field once it is filtered\n    this.setState({\n      searchUsers: searchUsers,\n      search: employeeName,\n    });\n  };\n  // This is the sorting function. It uses a standard .sort() method from JavaScript, which we use a conditional to determine what order the Names of the random users should be placed.\n  handleSortByName() {\n    const sortEl = this.state.searchUsers;\n\n    if (this.state.sorted === \"ascending\") {\n      const sorted = sortEl.sort((a, b) =>\n        a.name.first > b.name.first ? 1 : -1\n      );\n      this.setState({\n        searchUsers: sorted,\n        sorted: \"descending\",\n      });\n    } else {\n      const sorted = sortEl.sort((a, b) =>\n        a.name.first > b.name.first ? -1 : 1\n      );\n      this.setState({\n        searchUsers: sorted,\n        sorted: \"ascending\",\n      });\n    }\n  }\n  // Standard render() from React\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee Directory\n          <Filter inputChanged={this.handleInputChange} />\n        </Title>\n        <UserHead sortByName={this.handleSortByName} />\n        {/* Mapping our API data and positioning which data to use based on props established in the components */}\n        {this.state.searchUsers.map((user) => (\n          <UserRow\n            firstName={user.name.first}\n            lastName={user.name.last}\n            email={user.email}\n            age={user.dob.age}\n            phone={user.phone}\n            // id={user.id.value}\n            src={user.picture.large}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}